/*==========================================================
函数名：DaemonProcConnectCmd
功能：客户端daemon连接命令
算法实现：
参数说明：pMsg : OSP传递的消息体
返回值说明：无
-------------------------------------------------------------------------------------------------------
修改记录：
日  期		版本		修改人		走读人        修改记录

===========================================================*/
#include "../../include/client.h"
#include "../../../include/cscommon.h"
using namespace std;
UCinfo msgappinfo; //结构体保存连接信息
//Daemon收到连接命令操作
void CCDateInstance::DaemonProcConnectCmd(CMessage *const pMsg) 
{ 
	if (IDLE_STATE == CurState())
	{
	    //连接服务器
		KillTimer(CONNECT_TIMEOUT);//取消定时器
		DateInstanceClear();//初始化
	    //消息内容
		memcpy(&msgappinfo,pMsg->content,pMsg->length);

		logprintf(LOG_LVL_DETAIL,"Daemon instance recv connect cmd\n");
		logprintf(LOG_LVL_REPEAT,"Daemon instance recv connect cmd\n");

		cbShowMsgtoConsole("Daemon instance recv connect cmd",OutputMsgtoUser);
		
		strcpy(m_achIpAddr,msgappinfo.achIpaddr);
		strcpy(m_achusername,msgappinfo.achusername); 
	
		//连接服务器/判断返回值-----加循环判断连接
		m_dwServerNode = OspConnectTcpNode(inet_addr(m_achIpAddr),SERVER_LISTEN_PORT);
		
		if (INVALID_NODE == m_dwServerNode)
		{
			cbShowMsgtoConsole("connect tcp fail/ip wrong or server shut down or ...\n",OutputMsgtoUser);
			logprintf(LOG_LVL_WARNING,"connect tcp fail/ip wrong or server shut down or ...\n");
			//OspQuit();	取消注释即跳到上层循环，不会触发定时重连机制 
		}
		else
		{
			u32 dwLocalIpAddr = OspNodeLocalIpGet(m_dwServerNode);//获得与指定结点连接用的本地IP地址
			logprintf(LOG_LVL_KEYSTATUS,"connect tcp succeed. \n");
			
			cbShowMsgtoConsole("Osp connect to node succeed! wait server ack!",OutputMsgtoUser);
			
			//2017.07.20重组用户名和ip，用于区分客户端重名
			strcat(m_achusername,inet_ntoa(*((in_addr*)&dwLocalIpAddr))); 
			
			//设置断链检测---告知Daemon
			OspSetHBParam(m_dwServerNode,CLIENT_HBTIME,CLIENT_HBNUM);
			OspNodeDiscCBRegQ(m_dwServerNode,CLIENT_MSGAPP_NO,CCDateInstance::DAEMON);

			post(MAKEIID(SERVER_MSGAPP_NO,CInstance::PENDING),C_S_CONNECTSERVER_REQ,m_achusername,sizeof(m_achusername),m_dwServerNode);  
		}    
		//设置定时器----无ack消息则持续
        SetTimer(CONNECT_TIMEOUT,CONNECT_TIME);
	} 
	else
	{
		cbShowMsgtoConsole("已经连接了服务器 !",OutputMsgtoUser);
		logprintf(LOG_LVL_ERROR,"Daemon: you had been connect server !\n");
    }     

}

void CCDateInstance::DaemonProcConnectAck(CMessage *const pMsg) //收到ack，连接成功
{
	if (IDLE_STATE == CurState())
	{
		KillTimer(CONNECT_TIMEOUT);  //取消定时器
		NextState(CONNECT_STATE);
		m_dwServerId = pMsg->srcid;
		cbShowMsgtoConsole("收到ack反馈，连接服务器成功!",OutputMsgtoUser);
		post(MAKEIID(SERVER_MSGAPP_NO,CInstance::DAEMON),C_S_REQUSERLIST_REQ,NULL,0,m_dwServerNode);//直接获取用户列表
		logprintf(LOG_LVL_KEYSTATUS,"Daemon: recv server connect ack !Connect Success!\n");
	}
	else
	{
		logprintf(LOG_LVL_ERROR,"Daemon: ERROR recv server ack!\n");
	}
}


void CCDateInstance::DaemonProcReqListCmd(CMessage *const pMsg) //请求列表
{
	if (IDLE_STATE != CurState())
	{
		post(MAKEIID(SERVER_MSGAPP_NO,CInstance::DAEMON),C_S_REQUSERLIST_REQ,NULL,0,m_dwServerNode);
		logprintf(LOG_LVL_KEYSTATUS,"Daemon: post req user list to server.\n ");
	}
	else
	{
		cbShowMsgtoConsole("请先连接服务器!",OutputMsgtoUser);
	}
}


void CCDateInstance::DaemonProcReqListAck(CMessage *const pMsg) //列表反馈ack
{
	if (IDLE_STATE != CurState())
	{
		s8 achUserList[CSMIDDLESIZE]= {0};
		memcpy(achUserList,pMsg->content,pMsg->length);
		logprintf(LOG_LVL_KEYSTATUS,"Daemon: recv user list ack .\n");
		cbShowMsgtoConsole("用户列表如下：",OutputMsgtoUser);
		cbShowMsgtoConsole(achUserList,OutputMsgtoUser);
	}
	else
	{
		logprintf(LOG_LVL_ERROR,"Daemon:ERROR 收到用户列表ack");
		cbShowMsgtoConsole("Daemon:ERROR 收到用户列表ack.",OutputMsgtoUser);
	}
}

void CCDateInstance::DaemonProcReqListNack(CMessage *const pMsg) //列表反馈nack
{
	if (IDLE_STATE != CurState())
	{
		logprintf(LOG_LVL_KEYSTATUS,"Daemon: recv user list nack.\n");
		cbShowMsgtoConsole("用户列表为空",OutputMsgtoUser);
	}
	else
	{
		logprintf(LOG_LVL_ERROR,"Daemon:ERROR 收到用户列表nack");
		cbShowMsgtoConsole("Daemon:ERROR 收到用户列表nack.",OutputMsgtoUser);
	}
}


void CCDateInstance::DaemonOverFlow(CMessage *const pMsg)//服务器无空闲
{
	if (IDLE_STATE == CurState())
	{
		cbShowMsgtoConsole("服务器正忙!",OutputMsgtoUser);
		logprintf(LOG_LVL_WARNING,"Daemon: server busy now.\n");
	}
	else
	{
		logprintf(LOG_LVL_ERROR,"Daemon:ERROR 收到消息overflow");
		cbShowMsgtoConsole("Daemon:ERROR 收到消息overflow.",OutputMsgtoUser);
	}	
}

void CCDateInstance::DaemonDisConnect(CMessage *const pMsg)//断链
{
	if (IDLE_STATE != CurState())
	{
		cbShowMsgtoConsole("断开连接!",OutputMsgtoUser);
		logprintf(LOG_LVL_WARNING,"Daemon: osp disconnect.\n");
		NextState(IDLE_STATE);
		//清楚数据clear
        DateInstanceClear();
	}
	else
	{
		KillTimer(CONNECT_TIMEOUT);//断链清除定时器
		logprintf(LOG_LVL_ERROR,"Daemon:ERROR 收到消息disconnect");
		cbShowMsgtoConsole("Daemon:ERROR 收到消息disconnect.",OutputMsgtoUser);
	}
}


void CCDateInstance::DaemonConnectTimeOut(CMessage *const pMsg) //重连
{
	if (IDLE_STATE == CurState())
	{
		cbShowMsgtoConsole("连接服务器超时!等待重连",OutputMsgtoUser);
		DaemonProcConnectAgainCmd(pMsg); //重新连接服务器
	}
	else
	{
		logprintf(LOG_LVL_ERROR,"Daemon:ERROR 收到连接超时消息");
		cbShowMsgtoConsole("Daemon:ERROR 收到连接超时消息",OutputMsgtoUser);
	}
}
void CCDateInstance::DaemonProcInterCmd(CMessage *const pMsg)
{
	if (IDLE_STATE != CurState())
	{
		OspDisconnectTcpNode(m_dwServerNode);	//断开node上的连接
		if (FILE_STATE == CurState())
		{
			cbShowMsgtoConsole("文件上传已取消",OutputMsgtoUser);
		}
		logprintf(LOG_LVL_KEYSTATUS,"Daemon: interrupt connect cmd.\n");
		cbShowMsgtoConsole("连接已断开",OutputMsgtoUser);
		NextState(IDLE_STATE);
		//清除数据---clear
		DateInstanceClear();
	}
	else
	{
		KillTimer(CONNECT_TIMEOUT);
		logprintf(LOG_LVL_ERROR,"Daemon:ERROR 收到断开连接消息");
		cbShowMsgtoConsole("未连接服务器",OutputMsgtoUser);
	}
}